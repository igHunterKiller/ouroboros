// Copyright (c) 2015 Antony Arciuolo. See License.txt regarding use.

// Preliminary D3D12 as extracted from web-pages because referencing it 
// here is easier than hunting down each webpage.

#pragma once
#include <stdint.h>
#include <dxgi.h>

// === D3D12 Core Constants ===

typedef void* D3D12_GPU_VIRTUAL_ADDRESS;

#define D3D12_16BIT_INDEX_STRIP_CUT_VALUE 0xffff
#define D3D12_32BIT_INDEX_STRIP_CUT_VALUE 0xffffffff
#define D3D12_8BIT_INDEX_STRIP_CUT_VALUE 0xff
#define D3D12_APPEND_ALIGNED_ELEMENT 0xffffffff
#define D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT 9
#define D3D12_CLIP_OR_CULL_DISTANCE_COUNT 8
#define D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT 2
#define D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT 14
#define D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS 4
#define D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT 32
#define D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT 15
#define D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT 16
#define D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS 4
#define D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT 15
#define D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST 1
#define D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS 1
#define D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT 64
#define D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS 4
#define D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT 1
#define D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST 1
#define D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS 1
#define D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT 32
#define D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS 1
#define D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT 128
#define D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST 1
#define D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS 1
#define D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT 128
#define D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS 1
#define D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT 16
#define D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST 1
#define D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS 1
#define D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT 16
#define D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT 32
#define D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS 4
#define D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_COMMONSHADER_TEMP_REGISTER_COUNT 4096
#define D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST 3
#define D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS 3
#define D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX 10
#define D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN -10
#define D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE -8
#define D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE 7
#define D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT 256
#define D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 256
#define D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP 64
#define D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 240
#define D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP 68
#define D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 224
#define D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP 72
#define D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 208
#define D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP 76
#define D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 192
#define D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP 84
#define D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 176
#define D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP 92
#define D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 160
#define D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP 100
#define D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 144
#define D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP 112
#define D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 128
#define D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP 128
#define D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 112
#define D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP 144
#define D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 96
#define D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP 168
#define D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 80
#define D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP 204
#define D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 64
#define D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP 256
#define D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 48
#define D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP 340
#define D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 32
#define D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP 512
#define D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD 16
#define D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP 768
#define D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION 1
#define D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT 256
#define D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP 768
#define D3D12_CS_4_X_THREAD_GROUP_MAX_X 768
#define D3D12_CS_4_X_THREAD_GROUP_MAX_Y 768
#define D3D12_CS_4_X_UAV_REGISTER_COUNT 1
#define D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION 65535
#define D3D12_CS_TGSM_REGISTER_COUNT 8192
#define D3D12_CS_TGSM_REGISTER_READS_PER_INST 1
#define D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS 1
#define D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS 1
#define D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS 3
#define D3D12_CS_THREADGROUPID_REGISTER_COUNT 1
#define D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS 1
#define D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT 1
#define D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS 3
#define D3D12_CS_THREADIDINGROUP_REGISTER_COUNT 1
#define D3D12_CS_THREADID_REGISTER_COMPONENTS 3
#define D3D12_CS_THREADID_REGISTER_COUNT 1
#define D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP 1024
#define D3D12_CS_THREAD_GROUP_MAX_X 1024
#define D3D12_CS_THREAD_GROUP_MAX_Y 1024
#define D3D12_CS_THREAD_GROUP_MAX_Z 64
#define D3D12_CS_THREAD_GROUP_MIN_X 1
#define D3D12_CS_THREAD_GROUP_MIN_Y 1
#define D3D12_CS_THREAD_GROUP_MIN_Z 1
#define D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL 16384
#define D3D12_DEFAULT_BLEND_FACTOR_ALPHA 1.0f
#define D3D12_DEFAULT_BLEND_FACTOR_BLUE 1.0f
#define D3D12_DEFAULT_BLEND_FACTOR_GREEN 1.0f
#define D3D12_DEFAULT_BLEND_FACTOR_RED 1.0f
#define D3D12_DEFAULT_BORDER_COLOR_COMPONENT 0.0f
#define D3D12_DEFAULT_DEPTH_BIAS 0
#define D3D12_DEFAULT_DEPTH_BIAS_CLAMP 0.0f
#define D3D12_DEFAULT_MAX_ANISOTROPY 16
#define D3D12_DEFAULT_MIP_LOD_BIAS 0.0f
#define D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT 4194304
#define D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX 0
#define D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT 65536
#define D3D12_DEFAULT_SAMPLE_MASK 0xffffffff
#define D3D12_DEFAULT_SCISSOR_ENDX 0
#define D3D12_DEFAULT_SCISSOR_ENDY 0
#define D3D12_DEFAULT_SCISSOR_STARTX 0
#define D3D12_DEFAULT_SCISSOR_STARTY 0
#define D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS 0.0f
#define D3D12_DEFAULT_STENCIL_READ_MASK 0xff
#define D3D12_DEFAULT_STENCIL_REFERENCE 0
#define D3D12_DEFAULT_STENCIL_WRITE_MASK 0xff
#define D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX 0
#define D3D12_DEFAULT_VIEWPORT_HEIGHT 0
#define D3D12_DEFAULT_VIEWPORT_MAX_DEPTH 0.0f
#define D3D12_DEFAULT_VIEWPORT_MIN_DEPTH 0.0f
#define D3D12_DEFAULT_VIEWPORT_TOPLEFTX 0
#define D3D12_DEFAULT_VIEWPORT_TOPLEFTY 0
#define D3D12_DEFAULT_VIEWPORT_WIDTH 0
#define D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND 0xffffffff
#define D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END 0xfffffff7
#define D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START 0xfffffff0
#define D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS 3968
#define D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS 4
#define D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT 32
#define D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST 2
#define D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS 1
#define D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS 3
#define D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT 1
#define D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST 2
#define D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS 1
#define D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS 4
#define D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT 32
#define D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST 2
#define D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS 1
#define D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS 1
#define D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT 1
#define D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST 2
#define D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS 1
#define D3D12_DS_OUTPUT_REGISTER_COMPONENTS 4
#define D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_DS_OUTPUT_REGISTER_COUNT 32
#define D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP 0.6
#define D3D12_FLOAT32_MAX 3.402823466e+38f
#define D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP 0.6f
#define D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR 2.4f
#define D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR 1.0f
#define D3D12_FLOAT_TO_SRGB_OFFSET 0.055f
#define D3D12_FLOAT_TO_SRGB_SCALE_1 12.92f
#define D3D12_FLOAT_TO_SRGB_SCALE_2 1.055f
#define D3D12_FLOAT_TO_SRGB_THRESHOLD 0.0031308f
#define D3D12_FTOI_INSTRUCTION_MAX_INPUT 2147483647.999f
#define D3D12_FTOI_INSTRUCTION_MIN_INPUT -2147483648.999f
#define D3D12_FTOU_INSTRUCTION_MAX_INPUT 4294967295.999f
#define D3D12_FTOU_INSTRUCTION_MIN_INPUT 0.0f
#define D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST 2
#define D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS 1
#define D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS 1
#define D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT 1
#define D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS 1
#define D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT 1
#define D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST 2
#define D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS 1
#define D3D12_GS_INPUT_REGISTER_COMPONENTS 4
#define D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_GS_INPUT_REGISTER_COUNT 32
#define D3D12_GS_INPUT_REGISTER_READS_PER_INST 2
#define D3D12_GS_INPUT_REGISTER_READ_PORTS 1
#define D3D12_GS_INPUT_REGISTER_VERTICES 32
#define D3D12_GS_MAX_INSTANCE_COUNT 32
#define D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES 1024
#define D3D12_GS_OUTPUT_ELEMENTS 32
#define D3D12_GS_OUTPUT_REGISTER_COMPONENTS 4
#define D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_GS_OUTPUT_REGISTER_COUNT 32
#define D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT 32
#define D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT 32
#define D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS 4
#define D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST 2
#define D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS 1
#define D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND 0xffffffff
#define D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS 1
#define D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT 1
#define D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST 2
#define D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS 1
#define D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS 1
#define D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT 1
#define D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST 2
#define D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS 1
#define D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS 1
#define D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT 1
#define D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST 2
#define D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS 1
#define D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND 0xffffffff
#define D3D12_HS_MAXTESSFACTOR_LOWER_BOUND 1.0f
#define D3D12_HS_MAXTESSFACTOR_UPPER_BOUND 64.0f
#define D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS 3968
#define D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS 1
#define D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT 1
#define D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST 2
#define D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS 1
#define D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS 4
#define D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT 32
#define D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST 2
#define D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS 1
#define D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS 128
#define D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES 0
#define D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY 0
#define D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES 0
#define D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT 1
#define D3D12_IA_INSTANCE_ID_BIT_COUNT 32
#define D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT 32
#define D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT 32
#define D3D12_IA_PRIMITIVE_ID_BIT_COUNT 32
#define D3D12_IA_VERTEX_ID_BIT_COUNT 32
#define D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT 32
#define D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS 128
#define D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT 32
#define D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT 0xffffffff
#define D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER 0xffffffff
#define D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL 0xffffffff
#define D3D12_KEEP_UNORDERED_ACCESS_VIEWS 0xffffffff
#define D3D12_LINEAR_GAMMA 1.0f
#define D3D12_MAJOR_VERSION 12
#define D3D12_MAX_BORDER_COLOR_COMPONENT 1.0f
#define D3D12_MAX_DEPTH 1.0f
#define D3D12_MAX_MAXANISOTROPY 16
#define D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT 32
#define D3D12_MAX_POSITION_VALUE 3.402823466e+34f
#define D3D12_MAX_ROOT_COST 64
#define D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP 17
#define D3D12_MINOR_VERSION 0
#define D3D12_MIN_BORDER_COLOR_COMPONENT 0.0f
#define D3D12_MIN_DEPTH 0.0f
#define D3D12_MIN_MAXANISOTROPY 0
#define D3D12_MIP_LOD_BIAS_MAX 15.99f
#define D3D12_MIP_LOD_BIAS_MIN -16.0f
#define D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT 8
#define D3D12_MIP_LOD_RANGE_BIT_COUNT 8
#define D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH 1.4f
#define D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT 0
#define D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END 0xffffffff
#define D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START 0xfffffff8
#define D3D12_PACKED_TILE 0xffffffff
#define D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT 15
#define D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT 16
#define D3D12_PS_CS_UAV_REGISTER_COMPONENTS 1
#define D3D12_PS_CS_UAV_REGISTER_COUNT 8
#define D3D12_PS_CS_UAV_REGISTER_READS_PER_INST 1
#define D3D12_PS_CS_UAV_REGISTER_READ_PORTS 1
#define D3D12_PS_FRONTFACING_DEFAULT_VALUE 0xffffffff
#define D3D12_PS_FRONTFACING_FALSE_VALUE 0
#define D3D12_PS_FRONTFACING_TRUE_VALUE 0xffffffff
#define D3D12_PS_INPUT_REGISTER_COMPONENTS 4
#define D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_PS_INPUT_REGISTER_COUNT 32
#define D3D12_PS_INPUT_REGISTER_READS_PER_INST 2
#define D3D12_PS_INPUT_REGISTER_READ_PORTS 1
#define D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT 0.0f
#define D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS 1
#define D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT 1
#define D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS 1
#define D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_PS_OUTPUT_MASK_REGISTER_COUNT 1
#define D3D12_PS_OUTPUT_REGISTER_COMPONENTS 4
#define D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_PS_OUTPUT_REGISTER_COUNT 8
#define D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT 0.5f
#define D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT 16
#define D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE 4096
#define D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP 27
#define D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT 4096
#define D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE 4096
#define D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP 32
#define D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP 32
#define D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION 16384
#define D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT 1024
#define D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT 4096
#define D3D12_REQ_MAXANISOTROPY 16
#define D3D12_REQ_MIP_LEVELS 15
#define D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES 2048
#define D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE 4096
#define D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH 16384
#define D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM 128
#define D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM 0.25f
#define D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM 2048
#define D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP 20
#define D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE 4096
#define D3D12_REQ_SUBRESOURCES 30720
#define D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION 2048
#define D3D12_REQ_TEXTURE1D_U_DIMENSION 16384
#define D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION 2048
#define D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION 16384
#define D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION 2048
#define D3D12_REQ_TEXTURECUBE_DIMENSION 16384
#define D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL 0
#define D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES 0xffffffff
#define D3D12_SHADER_MAJOR_VERSION 5
#define D3D12_SHADER_MAX_INSTANCES 65535
#define D3D12_SHADER_MAX_INTERFACES 253
#define D3D12_SHADER_MAX_INTERFACE_CALL_SITES 4096
#define D3D12_SHADER_MAX_TYPES 65535
#define D3D12_SHADER_MINOR_VERSION 1
#define D3D12_SHIFT_INSTRUCTION_PAD_VALUE 0
#define D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT 5
#define D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT 8
#define D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT 65536
#define D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT 4096
#define D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES 2048
#define D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES 512
#define D3D12_SO_BUFFER_SLOT_COUNT 4
#define D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP 0xffffffff
#define D3D12_SO_NO_RASTERIZED_STREAM 0xffffffff
#define D3D12_SO_OUTPUT_COMPONENT_COUNT 128
#define D3D12_SO_STREAM_COUNT 4
#define D3D12_SPEC_DATE_DAY 14
#define D3D12_SPEC_DATE_MONTH 11
#define D3D12_SPEC_DATE_YEAR 2014
#define D3D12_SPEC_VERSION 1.16
#define D3D12_SRGB_GAMMA 2.2f
#define D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 12.92f
#define D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 1.055f
#define D3D12_SRGB_TO_FLOAT_EXPONENT 2.4f
#define D3D12_SRGB_TO_FLOAT_OFFSET 0.055f
#define D3D12_SRGB_TO_FLOAT_THRESHOLD 0.04045f
#define D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP 0.5f
#define D3D12_STANDARD_COMPONENT_BIT_COUNT 32
#define D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED 64
#define D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE 4
#define D3D12_STANDARD_PIXEL_COMPONENT_COUNT 128
#define D3D12_STANDARD_PIXEL_ELEMENT_COUNT 32
#define D3D12_STANDARD_VECTOR_SIZE 4
#define D3D12_STANDARD_VERTEX_ELEMENT_COUNT 32
#define D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT 64
#define D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT 8
#define D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT 8
#define D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END 0xffffffff
#define D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START 0xfffffff0
#define D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR 64
#define D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR 64
#define D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR 63
#define D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR 64
#define D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR 2
#define D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR 1
#define D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR 1
#define D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT 16
#define D3D12_TEXTURE_DATA_PITCH_ALIGNMENT 256
#define D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT 512
#define D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES 65536
#define D3D12_UAV_SLOT_COUNT 64
#define D3D12_UNBOUND_MEMORY_ACCESS_RESULT 0
#define D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX 15
#define D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE 16
#define D3D12_VIEWPORT_BOUNDS_MAX 32767
#define D3D12_VIEWPORT_BOUNDS_MIN -32768
#define D3D12_VS_INPUT_REGISTER_COMPONENTS 4
#define D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_VS_INPUT_REGISTER_COUNT 32
#define D3D12_VS_INPUT_REGISTER_READS_PER_INST 2
#define D3D12_VS_INPUT_REGISTER_READ_PORTS 1
#define D3D12_VS_OUTPUT_REGISTER_COMPONENTS 4
#define D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT 32
#define D3D12_VS_OUTPUT_REGISTER_COUNT 32
#define D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT 10
#define D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP 25
#define D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP 25


// === D3D12 Core Enumerations ===

enum D3D_ROOT_SIGNATURE_VERSION
{
	D3D_ROOT_SIGNATURE_VERSION_1  = 0x1,
};

enum D3D12_BLEND
{
	D3D12_BLEND_ZERO              = 1,
	D3D12_BLEND_ONE               = 2,
	D3D12_BLEND_SRC_COLOR         = 3,
	D3D12_BLEND_INV_SRC_COLOR     = 4,
	D3D12_BLEND_SRC_ALPHA         = 5,
	D3D12_BLEND_INV_SRC_ALPHA     = 6,
	D3D12_BLEND_DEST_ALPHA        = 7,
	D3D12_BLEND_INV_DEST_ALPHA    = 8,
	D3D12_BLEND_DEST_COLOR        = 9,
	D3D12_BLEND_INV_DEST_COLOR    = 10,
	D3D12_BLEND_SRC_ALPHA_SAT     = 11,
	D3D12_BLEND_BLEND_FACTOR      = 14,
	D3D12_BLEND_INV_BLEND_FACTOR  = 15,
	D3D12_BLEND_SRC1_COLOR        = 16,
	D3D12_BLEND_INV_SRC1_COLOR    = 17,
	D3D12_BLEND_SRC1_ALPHA        = 18,
	D3D12_BLEND_INV_SRC1_ALPHA    = 19,
};

enum D3D12_BLEND_OP
{
	D3D12_BLEND_OP_ADD           = 1,
	D3D12_BLEND_OP_SUBTRACT      = 2,
	D3D12_BLEND_OP_REV_SUBTRACT  = 3,
	D3D12_BLEND_OP_MIN           = 4,
	D3D12_BLEND_OP_MAX           = 5,
};

enum D3D12_BUFFER_SRV_FLAGS
{
	D3D12_BUFFER_SRV_FLAG_NONE  = 0,
	D3D12_BUFFER_SRV_FLAG_RAW   = 0x1,
};

enum D3D12_BUFFER_UAV_FLAGS
{
	D3D12_BUFFER_UAV_FLAG_NONE  = 0,
	D3D12_BUFFER_UAV_FLAG_RAW   = 0x1
};

enum D3D12_CLEAR_FLAGS
{
	D3D12_CLEAR_FLAG_DEPTH    = 0x1L,
	D3D12_CLEAR_FLAG_STENCIL  = 0x2L
};

enum D3D12_COLOR_WRITE_ENABLE
{
	D3D12_COLOR_WRITE_ENABLE_RED    = 1,
	D3D12_COLOR_WRITE_ENABLE_GREEN  = 2,
	D3D12_COLOR_WRITE_ENABLE_BLUE   = 4,
	D3D12_COLOR_WRITE_ENABLE_ALPHA  = 8,
	D3D12_COLOR_WRITE_ENABLE_ALL    = (D3D12_COLOR_WRITE_ENABLE_RED | D3D12_COLOR_WRITE_ENABLE_GREEN | D3D12_COLOR_WRITE_ENABLE_BLUE | D3D12_COLOR_WRITE_ENABLE_ALPHA)
};

enum D3D12_COMMAND_LIST_TYPE
{
	D3D12_COMMAND_LIST_TYPE_DIRECT   = 0,
	D3D12_COMMAND_LIST_TYPE_BUNDLE   = 1,
	D3D12_COMMAND_LIST_TYPE_COMPUTE  = 2,
	D3D12_COMMAND_LIST_TYPE_COPY     = 3,
};

enum D3D12_COMMAND_QUEUE_FLAGS
{
	D3D12_COMMAND_QUEUE_FLAG_NONE                 = 0,
	D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT  = 0x1,
};

enum D3D12_COMMAND_QUEUE_PRIORITY
{
	D3D12_COMMAND_QUEUE_PRIORITY_NORMAL  = 0,
	D3D12_COMMAND_QUEUE_PRIORITY_HIGH    = 100,
};

enum D3D12_COMPARISON_FUNC
{
	D3D12_COMPARISON_FUNC_NEVER          = 1,
	D3D12_COMPARISON_FUNC_LESS           = 2,
	D3D12_COMPARISON_FUNC_EQUAL          = 3,
	D3D12_COMPARISON_FUNC_LESS_EQUAL     = 4,
	D3D12_COMPARISON_FUNC_GREATER        = 5,
	D3D12_COMPARISON_FUNC_NOT_EQUAL      = 6,
	D3D12_COMPARISON_FUNC_GREATER_EQUAL  = 7,
	D3D12_COMPARISON_FUNC_ALWAYS         = 8,
};

enum D3D12_CONSERVATIVE_RASTERIZATION_MODE
{
	D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF  = 0,
	D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON   = 1,
};

enum D3D12_CONSERVATIVE_RASTERIZATION_TIER
{
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED  = 0,
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_1              = 1,
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_2              = 2,
	D3D12_CONSERVATIVE_RASTERIZATION_TIER_3              = 3,
};

enum D3D12_CPU_PAGE_PROPERTY
{
	D3D12_CPU_PAGE_PROPERTY_UNKNOWN        = 0,
	D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE  = 1,
	D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE  = 2,
	D3D12_CPU_PAGE_PROPERTY_WRITE_BACK     = 3,
};

enum D3D12_CROSS_NODE_SHARING_TIER
{
	D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED  = 0,
	D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED     = 1,
	D3D12_CROSS_NODE_SHARING_TIER_1              = 2,
	D3D12_CROSS_NODE_SHARING_TIER_2              = 3,
};

enum D3D12_CULL_MODE
{
	D3D12_CULL_MODE_NONE   = 1,
	D3D12_CULL_MODE_FRONT  = 2,
	D3D12_CULL_MODE_BACK   = 3,
};

enum D3D12_DEPTH_WRITE_MASK
{
	D3D12_DEPTH_WRITE_MASK_ZERO  = 0,
	D3D12_DEPTH_WRITE_MASK_ALL   = 1,
};

enum D3D12_DESCRIPTOR_HEAP_FLAGS
{
	D3D12_DESCRIPTOR_HEAP_FLAG_NONE            = 0,
	D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE  = 0x1,
};

enum D3D12_DESCRIPTOR_HEAP_TYPE
{
	D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV  = 0,
	D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER      = (D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV + 1),
	D3D12_DESCRIPTOR_HEAP_TYPE_RTV          = (D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER + 1),
	D3D12_DESCRIPTOR_HEAP_TYPE_DSV          = (D3D12_DESCRIPTOR_HEAP_TYPE_RTV + 1),
	D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES    = (D3D12_DESCRIPTOR_HEAP_TYPE_DSV + 1),
};

enum D3D12_DESCRIPTOR_RANGE_TYPE
{
	D3D12_DESCRIPTOR_RANGE_TYPE_SRV      = 0,
	D3D12_DESCRIPTOR_RANGE_TYPE_UAV      = (D3D12_DESCRIPTOR_RANGE_TYPE_SRV + 1),
	D3D12_DESCRIPTOR_RANGE_TYPE_CBV      = (D3D12_DESCRIPTOR_RANGE_TYPE_UAV + 1),
	D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER  = (D3D12_DESCRIPTOR_RANGE_TYPE_CBV + 1),
};

enum D3D12_DSV_DIMENSION
{
	D3D12_DSV_DIMENSION_UNKNOWN           = 0,
	D3D12_DSV_DIMENSION_TEXTURE1D         = 1,
	D3D12_DSV_DIMENSION_TEXTURE1DARRAY    = 2,
	D3D12_DSV_DIMENSION_TEXTURE2D         = 3,
	D3D12_DSV_DIMENSION_TEXTURE2DARRAY    = 4,
	D3D12_DSV_DIMENSION_TEXTURE2DMS       = 5,
	D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY  = 6,
};

enum D3D12_DSV_FLAGS
{
	D3D12_DSV_FLAG_NONE               = 0L,
	D3D12_DSV_FLAG_READ_ONLY_DEPTH    = 0x1L,
	D3D12_DSV_FLAG_READ_ONLY_STENCIL  = 0x2L
};

enum D3D12_FEATURE
{
	D3D12_FEATURE_D3D12_OPTIONS               = 0,
	D3D12_FEATURE_ARCHITECTURE                = (D3D12_FEATURE_D3D12_OPTIONS + 1),
	D3D12_FEATURE_FEATURE_LEVELS              = (D3D12_FEATURE_ARCHITECTURE + 1),
	D3D12_FEATURE_FORMAT_SUPPORT              = (D3D12_FEATURE_FEATURE_LEVELS + 1),
	D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS  = (D3D12_FEATURE_FORMAT_SUPPORT + 1),
	D3D12_FEATURE_FORMAT_INFO                 = (D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS + 1)
};

enum D3D12_FENCE_FLAGS
{
	D3D12_FENCE_FLAG_NONE                  = 0,
	D3D12_FENCE_FLAG_SHARED                = 0x1,
	D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER  = 0x2
};

enum D3D12_FILL_MODE
{
	D3D12_FILL_MODE_WIREFRAME  = 2,
	D3D12_FILL_MODE_SOLID      = 3,
};

enum D3D12_FILTER
{
	D3D12_FILTER_MIN_MAG_MIP_POINT                           = 0,
	D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR                    = 0x1,
	D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT              = 0x4,
	D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR                    = 0x5,
	D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT                    = 0x10,
	D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR             = 0x11,
	D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT                    = 0x14,
	D3D12_FILTER_MIN_MAG_MIP_LINEAR                          = 0x15,
	D3D12_FILTER_ANISOTROPIC                                 = 0x55,
	D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT                = 0x80,
	D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR         = 0x81,
	D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT   = 0x84,
	D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR         = 0x85,
	D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT         = 0x90,
	D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR  = 0x91,
	D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT         = 0x94,
	D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR               = 0x95,
	D3D12_FILTER_COMPARISON_ANISOTROPIC                      = 0xd5,
	D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT                   = 0x100,
	D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR            = 0x101,
	D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT      = 0x104,
	D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR            = 0x105,
	D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT            = 0x110,
	D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR     = 0x111,
	D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT            = 0x114,
	D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR                  = 0x115,
	D3D12_FILTER_MINIMUM_ANISOTROPIC                         = 0x155,
	D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT                   = 0x180,
	D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR            = 0x181,
	D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT      = 0x184,
	D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR            = 0x185,
	D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT            = 0x190,
	D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR     = 0x191,
	D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT            = 0x194,
	D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR                  = 0x195,
	D3D12_FILTER_MAXIMUM_ANISOTROPIC                         = 0x1d5
};

enum D3D12_FILTER_REDUCTION_TYPE
{
	D3D12_FILTER_REDUCTION_TYPE_STANDARD    = 0,
	D3D12_FILTER_REDUCTION_TYPE_COMPARISON  = 1,
	D3D12_FILTER_REDUCTION_TYPE_MINIMUM     = 2,
	D3D12_FILTER_REDUCTION_TYPE_MAXIMUM     = 3,
};

enum D3D12_FILTER_TYPE
{
	D3D12_FILTER_TYPE_POINT   = 0,
	D3D12_FILTER_TYPE_LINEAR  = 1,
};

enum D3D12_FORMAT_SUPPORT1
{
	D3D12_FORMAT_SUPPORT1_NONE                         = 0,
	D3D12_FORMAT_SUPPORT1_BUFFER                       = 0x1,
	D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER             = 0x2,
	D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER              = 0x4,
	D3D12_FORMAT_SUPPORT1_SO_BUFFER                    = 0x8,
	D3D12_FORMAT_SUPPORT1_TEXTURE1D                    = 0x10,
	D3D12_FORMAT_SUPPORT1_TEXTURE2D                    = 0x20,
	D3D12_FORMAT_SUPPORT1_TEXTURE3D                    = 0x40,
	D3D12_FORMAT_SUPPORT1_TEXTURECUBE                  = 0x80,
	D3D12_FORMAT_SUPPORT1_SHADER_LOAD                  = 0x100,
	D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE                = 0x200,
	D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON     = 0x400,
	D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT      = 0x800,
	D3D12_FORMAT_SUPPORT1_MIP                          = 0x1000,
	D3D12_FORMAT_SUPPORT1_RENDER_TARGET                = 0x4000,
	D3D12_FORMAT_SUPPORT1_BLENDABLE                    = 0x8000,
	D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL                = 0x10000,
	D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE          = 0x40000,
	D3D12_FORMAT_SUPPORT1_DISPLAY                      = 0x80000,
	D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT       = 0x100000,
	D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET     = 0x200000,
	D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD             = 0x400000,
	D3D12_FORMAT_SUPPORT1_SHADER_GATHER                = 0x800000,
	D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST             = 0x1000000,
	D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW  = 0x2000000,
	D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON     = 0x4000000,
	D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT               = 0x8000000,
	D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT       = 0x10000000,
	D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT        = 0x20000000,
	D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER                = 0x40000000,
};

enum D3D12_FORMAT_SUPPORT2
{
	D3D12_FORMAT_SUPPORT2_NONE                                          = 0,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD                                = 0x1,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS                        = 0x2,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE  = 0x4,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE                           = 0x8,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX                  = 0x10,
	D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX                = 0x20,
	D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD                                = 0x40,
	D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE                               = 0x80,
	D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP                        = 0x100,
	D3D12_FORMAT_SUPPORT2_TILED                                         = 0x200,
	D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY                            = 0x4000,
};

enum D3D12_HEAP_FLAGS
{
	D3D12_HEAP_FLAG_NONE                            = 0,
	D3D12_HEAP_FLAG_SHARED                          = 0x1,
	D3D12_HEAP_FLAG_DENY_BUFFERS                    = 0x4,
	D3D12_HEAP_FLAG_ALLOW_DISPLAY                   = 0x8,
	D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER            = 0x20,
	D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES             = 0x40,
	D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES         = 0x80,
	D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES  = 0,
	D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS              = 0xc0,
	D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES   = 0x44,
	D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES       = 0x84,
};

enum D3D12_HEAP_TYPE
{
	D3D12_HEAP_TYPE_DEFAULT   = 1,
	D3D12_HEAP_TYPE_UPLOAD    = 2,
	D3D12_HEAP_TYPE_READBACK  = 3,
	D3D12_HEAP_TYPE_CUSTOM    = 4,
};

enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
{
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED    = 0,
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF      = 1,
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF  = 2,
};

enum D3D12_INDIRECT_ARGUMENT_TYPE
{
	D3D12_INDIRECT_ARGUMENT_TYPE_DRAW                   = 0,
	D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED           = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH               = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW     = (D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW      = (D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT               = (D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW   = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW   = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW + 1),
	D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW  = (D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW + 1),
};

enum D3D12_INPUT_CLASSIFICATION
{
	D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA    = 0,
	D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA  = 1,
};

enum D3D12_LOGIC_OP
{
	D3D12_LOGIC_OP_CLEAR          = 0,
	D3D12_LOGIC_OP_SET            = (D3D12_LOGIC_OP_CLEAR + 1),
	D3D12_LOGIC_OP_COPY           = (D3D12_LOGIC_OP_SET + 1),
	D3D12_LOGIC_OP_COPY_INVERTED  = (D3D12_LOGIC_OP_COPY + 1),
	D3D12_LOGIC_OP_NOOP           = (D3D12_LOGIC_OP_COPY_INVERTED + 1),
	D3D12_LOGIC_OP_INVERT         = (D3D12_LOGIC_OP_NOOP + 1),
	D3D12_LOGIC_OP_AND            = (D3D12_LOGIC_OP_INVERT + 1),
	D3D12_LOGIC_OP_NAND           = (D3D12_LOGIC_OP_AND + 1),
	D3D12_LOGIC_OP_OR             = (D3D12_LOGIC_OP_NAND + 1),
	D3D12_LOGIC_OP_NOR            = (D3D12_LOGIC_OP_OR + 1),
	D3D12_LOGIC_OP_XOR            = (D3D12_LOGIC_OP_NOR + 1),
	D3D12_LOGIC_OP_EQUIV          = (D3D12_LOGIC_OP_XOR + 1),
	D3D12_LOGIC_OP_AND_REVERSE    = (D3D12_LOGIC_OP_EQUIV + 1),
	D3D12_LOGIC_OP_AND_INVERTED   = (D3D12_LOGIC_OP_AND_REVERSE + 1),
	D3D12_LOGIC_OP_OR_REVERSE     = (D3D12_LOGIC_OP_AND_INVERTED + 1),
	D3D12_LOGIC_OP_OR_INVERTED    = (D3D12_LOGIC_OP_OR_REVERSE + 1),
};

enum D3D12_MEMORY_POOL
{
	D3D12_MEMORY_POOL_UNKNOWN  = 0,
	D3D12_MEMORY_POOL_L0       = 1,
	D3D12_MEMORY_POOL_L1       = 2,
};

enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS
{
	D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE            = 0,
	D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE  = 0x1,
};

enum D3D12_PIPELINE_STATE_FLAGS
{
	D3D12_PIPELINE_STATE_FLAG_NONE        = 0,
	D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG  = 0x1,
};

enum D3D12_PREDICATION_OP
{
	D3D12_PREDICATION_OP_EQUAL_ZERO      = 0,
	D3D12_PREDICATION_OP_NOT_EQUAL_ZERO  = 1,
};

enum D3D12_PRIMITIVE_TOPOLOGY_TYPE
{
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED  = 0,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT      = 1,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE       = 2,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE   = 3,
	D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH      = 4,
};

enum D3D12_QUERY_HEAP_TYPE
{
	D3D12_QUERY_HEAP_TYPE_OCCLUSION            = 0,
	D3D12_QUERY_HEAP_TYPE_TIMESTAMP            = 1,
	D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS  = 2,
	D3D12_QUERY_HEAP_TYPE_SO_STATISTICS        = 3,
};

enum D3D12_QUERY_TYPE
{
	D3D12_QUERY_TYPE_OCCLUSION              = 0,
	D3D12_QUERY_TYPE_BINARY_OCCLUSION       = 1,
	D3D12_QUERY_TYPE_TIMESTAMP              = 2,
	D3D12_QUERY_TYPE_PIPELINE_STATISTICS    = 3,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0  = 4,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1  = 5,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2  = 6,
	D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3  = 7,
};

enum D3D12_RESOURCE_BARRIER_FLAGS
{
	D3D12_RESOURCE_BARRIER_FLAG_NONE        = 0,
	D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY  = 0x1,
	D3D12_RESOURCE_BARRIER_FLAG_END_ONLY    = 0x2,
};

enum D3D12_RESOURCE_BARRIER_TYPE
{
	D3D12_RESOURCE_BARRIER_TYPE_TRANSITION  = 0,
	D3D12_RESOURCE_BARRIER_TYPE_ALIASING    = (D3D12_RESOURCE_BARRIER_TYPE_TRANSITION + 1),
	D3D12_RESOURCE_BARRIER_TYPE_UAV         = (D3D12_RESOURCE_BARRIER_TYPE_ALIASING + 1),
};

enum D3D12_RESOURCE_BINDING_TIER
{
	D3D12_RESOURCE_BINDING_TIER_1  = 1,
	D3D12_RESOURCE_BINDING_TIER_2  = 2,
	D3D12_RESOURCE_BINDING_TIER_3  = 3,
};

enum D3D12_RESOURCE_DIMENSION
{
	D3D12_RESOURCE_DIMENSION_UNKNOWN    = 0,
	D3D12_RESOURCE_DIMENSION_BUFFER     = 1,
	D3D12_RESOURCE_DIMENSION_TEXTURE1D  = 2,
	D3D12_RESOURCE_DIMENSION_TEXTURE2D  = 3,
	D3D12_RESOURCE_DIMENSION_TEXTURE3D  = 4,
};

enum D3D12_RESOURCE_FLAGS
{
	D3D12_RESOURCE_FLAG_NONE                       = 0,
	D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET        = 0x1,
	D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL        = 0x2,
	D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS     = 0x4,
	D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE       = 0x8,
	D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER        = 0x10,
	D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS  = 0x20,
};

enum D3D12_RESOURCE_HEAP_TIER
{
	D3D12_RESOURCE_HEAP_TIER_1  = 1,
	D3D12_RESOURCE_HEAP_TIER_2  = 2,
};

enum D3D12_RESOURCE_STATES
{
	D3D12_RESOURCE_STATE_COMMON                      = 0,
	D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER  = 0x1,
	D3D12_RESOURCE_STATE_INDEX_BUFFER                = 0x2,
	D3D12_RESOURCE_STATE_RENDER_TARGET               = 0x4,
	D3D12_RESOURCE_STATE_UNORDERED_ACCESS            = 0x8,
	D3D12_RESOURCE_STATE_DEPTH_WRITE                 = 0x10,
	D3D12_RESOURCE_STATE_DEPTH_READ                  = 0x20,
	D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE   = 0x40,
	D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE       = 0x80,
	D3D12_RESOURCE_STATE_STREAM_OUT                  = 0x100,
	D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT           = 0x200,
	D3D12_RESOURCE_STATE_COPY_DEST                   = 0x400,
	D3D12_RESOURCE_STATE_COPY_SOURCE                 = 0x800,
	D3D12_RESOURCE_STATE_RESOLVE_DEST                = 0x1000,
	D3D12_RESOURCE_STATE_RESOLVE_SOURCE              = 0x2000,
	D3D12_RESOURCE_STATE_GENERIC_READ                = (((((D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER | D3D12_RESOURCE_STATE_INDEX_BUFFER) | D3D12_RESOURCE_STATE_COPY_SOURCE) | D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE) | D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE) | D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT),
	D3D12_RESOURCE_STATE_PRESENT                     = 0,
	D3D12_RESOURCE_STATE_PREDICATION                 = D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT,
};

enum D3D12_ROOT_PARAMETER_TYPE
{
	D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE  = 0,
	D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS   = (D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE + 1),
	D3D12_ROOT_PARAMETER_TYPE_CBV               = (D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS + 1),
	D3D12_ROOT_PARAMETER_TYPE_SRV               = (D3D12_ROOT_PARAMETER_TYPE_CBV + 1),
	D3D12_ROOT_PARAMETER_TYPE_UAV               = (D3D12_ROOT_PARAMETER_TYPE_SRV + 1),
};

enum D3D12_ROOT_SIGNATURE_FLAGS
{
	D3D12_ROOT_SIGNATURE_FLAG_NONE                                = 0,
	D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT  = 0x1,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS      = 0x2,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS        = 0x4,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS      = 0x8,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS    = 0x10,
	D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS       = 0x20,
	D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT                 = 0x40,
};

enum D3D12_RTV_DIMENSION
{
	D3D12_RTV_DIMENSION_UNKNOWN           = 0,
	D3D12_RTV_DIMENSION_BUFFER            = 1,
	D3D12_RTV_DIMENSION_TEXTURE1D         = 2,
	D3D12_RTV_DIMENSION_TEXTURE1DARRAY    = 3,
	D3D12_RTV_DIMENSION_TEXTURE2D         = 4,
	D3D12_RTV_DIMENSION_TEXTURE2DARRAY    = 5,
	D3D12_RTV_DIMENSION_TEXTURE2DMS       = 6,
	D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY  = 7,
	D3D12_RTV_DIMENSION_TEXTURE3D         = 8,
};

enum D3D12_SHADER_COMPONENT_MAPPING
{
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0  = 0,
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1  = 1,
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2  = 2,
	D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3  = 3,
	D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0            = 4,
	D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1            = 5,
};

enum D3D12_SHADER_MIN_PRECISION_SUPPORT
{
	D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE    = 0,
	D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT  = 0x1,
	D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT  = 0x2,
};

enum D3D12_SHADER_VISIBILITY
{
	D3D12_SHADER_VISIBILITY_ALL       = 0,
	D3D12_SHADER_VISIBILITY_VERTEX    = 1,
	D3D12_SHADER_VISIBILITY_HULL      = 2,
	D3D12_SHADER_VISIBILITY_DOMAIN    = 3,
	D3D12_SHADER_VISIBILITY_GEOMETRY  = 4,
	D3D12_SHADER_VISIBILITY_PIXEL     = 5,
};

enum D3D12_SRV_DIMENSION
{
	D3D12_SRV_DIMENSION_UNKNOWN           = 0,
	D3D12_SRV_DIMENSION_BUFFER            = 1,
	D3D12_SRV_DIMENSION_TEXTURE1D         = 2,
	D3D12_SRV_DIMENSION_TEXTURE1DARRAY    = 3,
	D3D12_SRV_DIMENSION_TEXTURE2D         = 4,
	D3D12_SRV_DIMENSION_TEXTURE2DARRAY    = 5,
	D3D12_SRV_DIMENSION_TEXTURE2DMS       = 6,
	D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY  = 7,
	D3D12_SRV_DIMENSION_TEXTURE3D         = 8,
	D3D12_SRV_DIMENSION_TEXTURECUBE       = 9,
	D3D12_SRV_DIMENSION_TEXTURECUBEARRAY  = 10,
};

enum D3D12_STATIC_BORDER_COLOR
{
	D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK  = 0,
	D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK       = (D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK + 1),
	D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE       = (D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK + 1),
};

enum D3D12_STENCIL_OP
{
	D3D12_STENCIL_OP_KEEP      = 1,
	D3D12_STENCIL_OP_ZERO      = 2,
	D3D12_STENCIL_OP_REPLACE   = 3,
	D3D12_STENCIL_OP_INCR_SAT  = 4,
	D3D12_STENCIL_OP_DECR_SAT  = 5,
	D3D12_STENCIL_OP_INVERT    = 6,
	D3D12_STENCIL_OP_INCR      = 7,
	D3D12_STENCIL_OP_DECR      = 8,
};

enum D3D12_TEXTURE_ADDRESS_MODE
{
	D3D12_TEXTURE_ADDRESS_MODE_WRAP         = 1,
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR       = 2,
	D3D12_TEXTURE_ADDRESS_MODE_CLAMP        = 3,
	D3D12_TEXTURE_ADDRESS_MODE_BORDER       = 4,
	D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE  = 5,
};

enum D3D12_TEXTURE_COPY_TYPE
{
	D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX  = 0,
	D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT   = 1,
};

enum D3D12_TEXTURE_LAYOUT
{
	D3D12_TEXTURE_LAYOUT_UNKNOWN                 = 0,
	D3D12_TEXTURE_LAYOUT_ROW_MAJOR               = 1,
	D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE  = 2,
	D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE   = 3,
};

enum D3D12_TILE_COPY_FLAGS
{
	D3D12_TILE_COPY_FLAG_NONE                                      = 0,
	D3D12_TILE_COPY_FLAG_NO_HAZARD                                 = 0x1,
	D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE  = 0x2,
	D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER  = 0x4,
};

enum D3D12_TILE_MAPPING_FLAGS
{
	D3D12_TILE_MAPPING_FLAG_NONE       = 0,
	D3D12_TILE_MAPPING_FLAG_NO_HAZARD  = 0x1,
};

enum D3D12_TILE_RANGE_FLAGS
{
	D3D12_TILE_RANGE_FLAG_NONE               = 0,
	D3D12_TILE_RANGE_FLAG_NULL               = 1,
	D3D12_TILE_RANGE_FLAG_SKIP               = 2,
	D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE  = 4,
};

enum D3D12_TILED_RESOURCES_TIER
{
	D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED  = 0,
	D3D12_TILED_RESOURCES_TIER_1              = 1,
	D3D12_TILED_RESOURCES_TIER_2              = 2,
	D3D12_TILED_RESOURCES_TIER_3              = 3,
};

enum D3D12_UAV_DIMENSION
{
	D3D12_UAV_DIMENSION_UNKNOWN         = 0,
	D3D12_UAV_DIMENSION_BUFFER          = 1,
	D3D12_UAV_DIMENSION_TEXTURE1D       = 2,
	D3D12_UAV_DIMENSION_TEXTURE1DARRAY  = 3,
	D3D12_UAV_DIMENSION_TEXTURE2D       = 4,
	D3D12_UAV_DIMENSION_TEXTURE2DARRAY  = 5,
	D3D12_UAV_DIMENSION_TEXTURE3D       = 8,
};


// === D3D12 Core Structures ===

struct ID3D12Resource;
struct ID3D12RootSignature;

struct D3D12_RECT
{
	int left;
	int top;
	int right;
	int bottom;
};

struct D3D12_RENDER_TARGET_BLEND_DESC
{
	bool BlendEnable;
	bool LogicOpEnable;
	D3D12_BLEND SrcBlend;
	D3D12_BLEND DestBlend;
	D3D12_BLEND_OP BlendOp;
	D3D12_BLEND SrcBlendAlpha;
	D3D12_BLEND DestBlendAlpha;
	D3D12_BLEND_OP BlendOpAlpha;
	D3D12_LOGIC_OP LogicOp;
	uint8_t RenderTargetWriteMask;
};

struct D3D12_BLEND_DESC
{
	bool AlphaToCoverageEnable;
	bool IndependentBlendEnable;
	D3D12_RENDER_TARGET_BLEND_DESC RenderTarget[8];
};

struct D3D12_BOX
{
	uint32_t left;
	uint32_t top;
	uint32_t front;
	uint32_t right;
	uint32_t bottom;
	uint32_t back;
};

struct D3D12_BUFFER_RTV
{
	uint64_t FirstElement;
	uint32_t NumElements;
};

struct D3D12_BUFFER_SRV
{
	uint64_t FirstElement;
	uint32_t NumElements;
	uint32_t StructureByteStride;
	D3D12_BUFFER_SRV_FLAGS Flags;
};

struct D3D12_BUFFER_UAV
{
	uint64_t FirstElement;
	uint32_t NumElements;
	uint32_t StructureByteStride;
	uint64_t CounterOffsetInBytes;
	D3D12_BUFFER_UAV_FLAGS Flags;
};

struct D3D12_CACHED_PIPELINE_STATE
{
	const void* pCachedBlob;
	size_t CachedBlobSizeInBytes;
};

struct D3D12_DEPTH_STENCIL_VALUE
{
	float Depth;
	uint8_t Stencil;
};

struct D3D12_CLEAR_VALUE
{
	DXGI_FORMAT Format;
	union
	{
		float Color[4];
		D3D12_DEPTH_STENCIL_VALUE DepthStencil;
	};
};

struct D3D12_COMMAND_QUEUE_DESC
{
	D3D12_COMMAND_LIST_TYPE Type;
	INT Priority;
	D3D12_COMMAND_QUEUE_FLAGS Flags;
	uint32_t NodeMask;
};

struct D3D12_INDIRECT_ARGUMENT_DESC
{
	D3D12_INDIRECT_ARGUMENT_TYPE Type;
	union
	{
		struct
		{
			uint32_t Slot;
		};
		struct
		{
			uint32_t RootParameterIndex;
			uint32_t DestOffsetIn32BitValues;
			uint32_t Num32BitValuesToSet;
		};
		struct
		{
			uint32_t RootParameterIndex;
		};
		struct
		{
			uint32_t RootParameterIndex;
		};
		struct
		{
			uint32_t RootParameterIndex;
		};
	};
};

struct D3D12_COMMAND_SIGNATURE_DESC
{
	uint32_t ByteStride;
	uint32_t NumArgumentDescs;
	const D3D12_INDIRECT_ARGUMENT_DESC* pArgumentDescs;
	uint32_t NodeMask;
};

struct D3D12_CONSTANT_BUFFER_VIEW_DESC
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	uint32_t SizeInBytes;
};

struct D3D12_CPU_DESCRIPTOR_HANDLE
{
	size_t ptr;
};

struct D3D12_DEPTH_STENCILOP_DESC
{
	D3D12_STENCIL_OP StencilFailOp;
	D3D12_STENCIL_OP StencilDepthFailOp;
	D3D12_STENCIL_OP StencilPassOp;
	D3D12_COMPARISON_FUNC StencilFunc;
};

struct D3D12_DESCRIPTOR_HEAP_DESC
{
	D3D12_DESCRIPTOR_HEAP_TYPE Type;
	uint32_t NumDescriptors;
	D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
	uint32_t NodeMask;
};

struct D3D12_DESCRIPTOR_RANGE
{
	D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
	uint32_t NumDescriptors;
	uint32_t BaseShaderRegister;
	uint32_t RegisterSpace;
	uint32_t OffsetInDescriptorsFromTableStart;
};

struct D3D12_DISCARD_REGION
{
	uint32_t NumRects;
	const D3D12_RECT* pRects;
	uint32_t FirstSubresource;
	uint32_t NumSubresources;
};

struct D3D12_DISPATCH_ARGUMENTS
{
	uint32_t ThreadGroupCountX;
	uint32_t ThreadGroupCountY;
	uint32_t ThreadGroupCountZ;
};

struct D3D12_DRAW_ARGUMENTS
{
	uint32_t VertexCountPerInstance;
	uint32_t InstanceCount;
	uint32_t StartVertexLocation;
	uint32_t StartInstanceLocation;
};

struct D3D12_DRAW_INDEXED_ARGUMENTS
{
	uint32_t IndexCountPerInstance;
	uint32_t InstanceCount;
	uint32_t StartIndexLocation;
	INT BaseVertexLocation;
	uint32_t StartInstanceLocation;
};

struct D3D12_FEATURE_DATA_ARCHITECTURE
{
	uint32_t NodeIndex;
	bool TileBasedRenderer;
	bool UMA;
	bool CacheCoherentUMA;
};

struct D3D12_FEATURE_DATA_D3D12_OPTIONS
{
	bool DoublePrecisionFloatShaderOps;
	bool OutputMergerLogicOp;
	D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
	D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
	D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
	bool PSSpecifiedStencilRefSupported;
	bool TypedUAVLoadAdditionalFormats;
	bool ROVsSupported;
	D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
	uint32_t MaxGPUVirtualAddressBitsPerResource;
	bool StandardSwizzle64KBSupported;
	D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;
	bool CrossAdapterRowMajorTextureSupported;
	bool VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
	D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
};

struct D3D12_FEATURE_DATA_FEATURE_LEVELS
{
	uint32_t NumFeatureLevels;
	const D3D_FEATURE_LEVEL* pFeatureLevelsRequested;
	D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
};

struct D3D12_FEATURE_DATA_FORMAT_INFO
{
	DXGI_FORMAT Format;
	uint8_t PlaneCount;
};

struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
{
	DXGI_FORMAT Format;
	D3D12_FORMAT_SUPPORT1 Support1;
	D3D12_FORMAT_SUPPORT2 Support2;
};

struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
{
	DXGI_FORMAT Format;
	uint32_t SampleCount;
	D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
	uint32_t NumQualityLevels;
};

struct D3D12_GPU_DESCRIPTOR_HANDLE
{
	uint64_t ptr;
};

struct D3D12_HEAP_PROPERTIES
{
	D3D12_HEAP_TYPE Type;
	D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
	D3D12_MEMORY_POOL MemoryPoolPreference;
	uint32_t CreationNodeMask;
	uint32_t VisibleNodeMask;
};

struct D3D12_HEAP_DESC
{
	uint64_t SizeInBytes;
	D3D12_HEAP_PROPERTIES Properties;
	uint64_t Alignment;
	D3D12_HEAP_FLAGS Flags;
};

struct D3D12_INDEX_BUFFER_VIEW
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	uint32_t SizeInBytes;
	DXGI_FORMAT Format;
};

struct D3D12_INPUT_ELEMENT_DESC
{
	LPCSTR SemanticName;
	uint32_t SemanticIndex;
	DXGI_FORMAT Format;
	uint32_t InputSlot;
	uint32_t AlignedByteOffset;
	D3D12_INPUT_CLASSIFICATION InputSlotClass;
	uint32_t InstanceDataStepRate;
};

struct D3D12_INPUT_LAYOUT_DESC
{
	const D3D12_INPUT_ELEMENT_DESC* pInputElementDescs;
	uint32_t NumElements;
};

struct D3D12_MEMCPY_DEST
{
	void* pData;
	size_t RowPitch;
	size_t SlicePitch;
};

struct D3D12_PACKED_MIP_INFO
{
	uint8_t NumStandardMips;
	uint8_t NumPackedMips;
	uint32_t NumTilesForPackedMips;
	uint32_t StartTileIndexInOverallResource;
};

struct D3D12_SUBRESOURCE_FOOTPRINT
{
	DXGI_FORMAT Format;
	uint32_t Width;
	uint32_t Height;
	uint32_t Depth;
	uint32_t RowPitch;
};

struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
{
	uint64_t Offset;
	D3D12_SUBRESOURCE_FOOTPRINT Footprint;
};

struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
{
	uint64_t IAVertices;
	uint64_t IAPrimitives;
	uint64_t VSInvocations;
	uint64_t GSInvocations;
	uint64_t GSPrimitives;
	uint64_t CInvocations;
	uint64_t CPrimitives;
	uint64_t PSInvocations;
	uint64_t HSInvocations;
	uint64_t DSInvocations;
	uint64_t CSInvocations;
};

struct D3D12_QUERY_DATA_SO_STATISTICS
{
	uint64_t NumPrimitivesWritten;
	uint64_t PrimitivesStorageNeeded;
};

struct D3D12_QUERY_HEAP_DESC
{
	D3D12_QUERY_HEAP_TYPE Type;
	uint32_t Count;
	uint32_t NodeMask;
};

struct D3D12_RANGE
{
	size_t Begin;
	size_t End;
};

struct D3D12_RASTERIZER_DESC
{
	D3D12_FILL_MODE FillMode;
	D3D12_CULL_MODE CullMode;
	bool FrontCounterClockwise;
	INT DepthBias;
	float DepthBiasClamp;
	float SlopeScaledDepthBias;
	bool DepthClipEnable;
	bool MultisampleEnable;
	bool AntialiasedLineEnable;
	uint32_t ForcedSampleCount;
	D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
};

struct D3D12_RESOURCE_ALIASING_BARRIER
{
	ID3D12Resource* pResourceBefore;
	ID3D12Resource* pResourceAfter;
};

struct D3D12_RESOURCE_ALLOCATION_INFO
{
	uint64_t SizeInBytes;
	uint64_t Alignment;
};

struct D3D12_RESOURCE_DESC
{
	D3D12_RESOURCE_DIMENSION Dimension;
	uint64_t Alignment;
	uint64_t Width;
	uint32_t Height;
	uint16_t DepthOrArraySize;
	uint16_t MipLevels;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
	D3D12_TEXTURE_LAYOUT Layout;
	D3D12_RESOURCE_FLAGS Flags;
};

struct D3D12_RESOURCE_TRANSITION_BARRIER
{
	ID3D12Resource* pResource;
	uint32_t Subresource;
	D3D12_RESOURCE_STATES StateBefore;
	D3D12_RESOURCE_STATES StateAfter;
};

struct D3D12_RESOURCE_UAV_BARRIER
{
	ID3D12Resource* pResource;
};

struct D3D12_RESOURCE_BARRIER
{
	D3D12_RESOURCE_BARRIER_TYPE Type;
	D3D12_RESOURCE_BARRIER_FLAGS Flags;
	union
	{
		D3D12_RESOURCE_TRANSITION_BARRIER Transition;
		D3D12_RESOURCE_ALIASING_BARRIER Aliasing;
		D3D12_RESOURCE_UAV_BARRIER UAV;
	};
};

struct D3D12_ROOT_CONSTANTS
{
	uint32_t ShaderRegister;
	uint32_t RegisterSpace;
	uint32_t Num32BitValues;
};

struct D3D12_ROOT_DESCRIPTOR
{
	uint32_t ShaderRegister;
	uint32_t RegisterSpace;
};

struct D3D12_ROOT_DESCRIPTOR_TABLE
{
	uint32_t NumDescriptorRanges;
	const D3D12_DESCRIPTOR_RANGE* pDescriptorRanges;
};

struct D3D12_ROOT_PARAMETER
{
	D3D12_ROOT_PARAMETER_TYPE ParameterType;
	union
	{
		D3D12_ROOT_DESCRIPTOR_TABLE DescriptorTable;
		D3D12_ROOT_CONSTANTS Constants;
		D3D12_ROOT_DESCRIPTOR Descriptor;
	};
	D3D12_SHADER_VISIBILITY ShaderVisibility;
};

struct D3D12_SAMPLER_DESC
{
	D3D12_FILTER Filter;
	D3D12_TEXTURE_ADDRESS_MODE AddressU;
	D3D12_TEXTURE_ADDRESS_MODE AddressV;
	D3D12_TEXTURE_ADDRESS_MODE AddressW;
	float MipLODBias;
	uint32_t MaxAnisotropy;
	D3D12_COMPARISON_FUNC ComparisonFunc;
	float BorderColor[4];
	float MinLOD;
	float MaxLOD;
};

struct D3D12_SHADER_BYTECODE
{
	const void* pShaderBytecode;
	size_t BytecodeLength;
};

struct D3D12_SO_DECLARATION_ENTRY
{
	uint32_t Stream;
	LPCSTR SemanticName;
	uint32_t SemanticIndex;
	BYTE StartComponent;
	BYTE ComponentCount;
	BYTE OutputSlot;
};

struct D3D12_STATIC_SAMPLER_DESC
{
	D3D12_FILTER Filter;
	D3D12_TEXTURE_ADDRESS_MODE AddressU;
	D3D12_TEXTURE_ADDRESS_MODE AddressV;
	D3D12_TEXTURE_ADDRESS_MODE AddressW;
	float MipLODBias;
	uint32_t MaxAnisotropy;
	D3D12_COMPARISON_FUNC ComparisonFunc;
	D3D12_STATIC_BORDER_COLOR BorderColor;
	float MinLOD;
	float MaxLOD;
	uint32_t ShaderRegister;
	uint32_t RegisterSpace;
	D3D12_SHADER_VISIBILITY ShaderVisibility;
};

struct D3D12_ROOT_SIGNATURE_DESC
{
	uint32_t NumParameters;
	const D3D12_ROOT_PARAMETER* pParameters;
	uint32_t NumStaticSamplers;
	const D3D12_STATIC_SAMPLER_DESC* pStaticSamplers;
	D3D12_ROOT_SIGNATURE_FLAGS Flags;
};

struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	uint64_t SizeInBytes;
	D3D12_GPU_VIRTUAL_ADDRESS BufferFilledSizeLocation;
};

struct D3D12_STREAM_OUTPUT_DESC
{
	const D3D12_SO_DECLARATION_ENTRY* pSODeclaration;
	uint32_t NumEntries;
	const uint32_t* pBufferStrides;
	uint32_t NumStrides;
	uint32_t RasterizedStream;
};

struct D3D12_SUBRESOURCE_DATA
{
	const void* pData;
	LONG_PTR RowPitch;
	LONG_PTR SlicePitch;
};

struct D3D12_SUBRESOURCE_INFO
{
	uint64_t Offset;
	uint32_t RowPitch;
	uint32_t DepthPitch;
};

struct D3D12_SUBRESOURCE_TILING
{
	uint32_t WidthInTiles;
	UINT16 HeightInTiles;
	UINT16 DepthInTiles;
	uint32_t StartTileIndexInOverallResource;
};

struct D3D12_TEX1D_ARRAY_DSV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX1D_ARRAY_RTV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX1D_ARRAY_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
	float ResourceMinLODClamp;
};

struct D3D12_TEX1D_ARRAY_UAV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX1D_DSV
{
	uint32_t MipSlice;
};

struct D3D12_TEX1D_RTV
{
	uint32_t MipSlice;
};

struct D3D12_TEX1D_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	float ResourceMinLODClamp;
};

struct D3D12_TEX1D_UAV
{
	uint32_t MipSlice;
};

struct D3D12_TEX2D_ARRAY_DSV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX2D_ARRAY_RTV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
	uint32_t PlaneSlice;
};

struct D3D12_TEX2D_ARRAY_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
	uint32_t PlaneSlice;
	float ResourceMinLODClamp;
};

struct D3D12_TEX2D_ARRAY_UAV
{
	uint32_t MipSlice;
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
	uint32_t PlaneSlice;
};

struct D3D12_TEX2D_DSV
{
	uint32_t MipSlice;
};

struct D3D12_TEX2D_RTV
{
	uint32_t MipSlice;
	uint32_t PlaneSlice;
};

struct D3D12_TEX2D_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	uint32_t PlaneSlice;
	float ResourceMinLODClamp;
};

struct D3D12_TEX2D_UAV
{
	uint32_t MipSlice;
	uint32_t PlaneSlice;
};

struct D3D12_TEX2DMS_ARRAY_DSV
{
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX2DMS_ARRAY_RTV
{
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX2DMS_ARRAY_SRV
{
	uint32_t FirstArraySlice;
	uint32_t ArraySize;
};

struct D3D12_TEX2DMS_DSV
{
	uint32_t UnusedField_NothingToDefine;
};

struct D3D12_TEX2DMS_RTV
{
	uint32_t UnusedField_NothingToDefine;
};

struct D3D12_TEX2DMS_SRV
{
	uint32_t UnusedField_NothingToDefine;
};

struct D3D12_TEX3D_RTV
{
	uint32_t MipSlice;
	uint32_t FirstWSlice;
	uint32_t WSize;
};

struct D3D12_TEX3D_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	float ResourceMinLODClamp;
};

struct D3D12_TEX3D_UAV
{
	uint32_t MipSlice;
	uint32_t FirstWSlice;
	uint32_t WSize;
};

struct D3D12_TEXCUBE_ARRAY_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	uint32_t First2DArrayFace;
	uint32_t NumCubes;
	float ResourceMinLODClamp;
};

struct D3D12_TEXCUBE_SRV
{
	uint32_t MostDetailedMip;
	uint32_t MipLevels;
	float ResourceMinLODClamp;
};

struct D3D12_TEXTURE_COPY_LOCATION
{
	ID3D12Resource* pResource;
	D3D12_TEXTURE_COPY_TYPE Type;
	union
	{
		D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;
		uint32_t SubresourceIndex;
	};
};

struct D3D12_TILE_REGION_SIZE
{
	uint32_t NumTiles;
	bool UseBox;
	uint32_t Width;
	UINT16 Height;
	UINT16 Depth;
};

struct D3D12_TILE_SHAPE
{
	uint32_t WidthInTexels;
	uint32_t HeightInTexels;
	uint32_t DepthInTexels;
};

struct D3D12_TILED_RESOURCE_COORDINATE
{
	uint32_t X;
	uint32_t Y;
	uint32_t Z;
	uint32_t Subresource;
};

struct D3D12_UNORDERED_ACCESS_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_UAV_DIMENSION ViewDimension;
	union
	{
		D3D12_BUFFER_UAV Buffer;
		D3D12_TEX1D_UAV Texture1D;
		D3D12_TEX1D_ARRAY_UAV Texture1DArray;
		D3D12_TEX2D_UAV Texture2D;
		D3D12_TEX2D_ARRAY_UAV Texture2DArray;
		D3D12_TEX3D_UAV Texture3D;
	};
};

struct D3D12_VERTEX_BUFFER_VIEW
{
	D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
	uint32_t SizeInBytes;
	uint32_t StrideInBytes;
};

struct D3D12_VIEWPORT
{
	float TopLeftX;
	float TopLeftY;
	float Width;
	float Height;
	float MinDepth;
	float MaxDepth;
};

struct D3D12_DEPTH_STENCIL_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_DSV_DIMENSION ViewDimension;
	D3D12_DSV_FLAGS Flags;
	union
	{
		D3D12_TEX1D_DSV Texture1D;
		D3D12_TEX1D_ARRAY_DSV Texture1DArray;
		D3D12_TEX2D_DSV Texture2D;
		D3D12_TEX2D_ARRAY_DSV Texture2DArray;
		D3D12_TEX2DMS_DSV Texture2DMS;
		D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
	};
};

struct D3D12_COMPUTE_PIPELINE_STATE_DESC
{
	ID3D12RootSignature* pRootSignature;
	D3D12_SHADER_BYTECODE CS;
	uint32_t NodeMask;
	D3D12_CACHED_PIPELINE_STATE CachedPSO;
	D3D12_PIPELINE_STATE_FLAGS Flags;
};

struct D3D12_DEPTH_STENCIL_DESC
{
	bool DepthEnable;
	D3D12_DEPTH_WRITE_MASK DepthWriteMask;
	D3D12_COMPARISON_FUNC DepthFunc;
	bool StencilEnable;
	uint8_t StencilReadMask;
	uint8_t StencilWriteMask;
	D3D12_DEPTH_STENCILOP_DESC FrontFace;
	D3D12_DEPTH_STENCILOP_DESC BackFace;
};

struct D3D12_RENDER_TARGET_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_RTV_DIMENSION ViewDimension;
	union
	{
		D3D12_BUFFER_RTV Buffer;
		D3D12_TEX1D_RTV Texture1D;
		D3D12_TEX1D_ARRAY_RTV Texture1DArray;
		D3D12_TEX2D_RTV Texture2D;
		D3D12_TEX2D_ARRAY_RTV Texture2DArray;
		D3D12_TEX2DMS_RTV Texture2DMS;
		D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
		D3D12_TEX3D_RTV Texture3D;
	};
};

struct D3D12_SHADER_RESOURCE_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D12_SRV_DIMENSION ViewDimension;
	uint32_t Shader4ComponentMapping;
	union
	{
		D3D12_BUFFER_SRV Buffer;
		D3D12_TEX1D_SRV Texture1D;
		D3D12_TEX1D_ARRAY_SRV Texture1DArray;
		D3D12_TEX2D_SRV Texture2D;
		D3D12_TEX2D_ARRAY_SRV Texture2DArray;
		D3D12_TEX2DMS_SRV Texture2DMS;
		D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
		D3D12_TEX3D_SRV Texture3D;
		D3D12_TEXCUBE_SRV TextureCube;
		D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
	};
};

struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
{
	ID3D12RootSignature* pRootSignature;
	D3D12_SHADER_BYTECODE VS;
	D3D12_SHADER_BYTECODE PS;
	D3D12_SHADER_BYTECODE DS;
	D3D12_SHADER_BYTECODE HS;
	D3D12_SHADER_BYTECODE GS;
	D3D12_STREAM_OUTPUT_DESC StreamOutput;
	D3D12_BLEND_DESC BlendState;
	uint32_t SampleMask;
	D3D12_RASTERIZER_DESC RasterizerState;
	D3D12_DEPTH_STENCIL_DESC DepthStencilState;
	D3D12_INPUT_LAYOUT_DESC InputLayout;
	D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
	D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
	uint32_t NumRenderTargets;
	DXGI_FORMAT RTVFormats[8];
	DXGI_FORMAT DSVFormat;
	DXGI_SAMPLE_DESC SampleDesc;
	uint32_t NodeMask;
	D3D12_CACHED_PIPELINE_STATE CachedPSO;
	D3D12_PIPELINE_STATE_FLAGS Flags;
};


// === D3D12 Core Interfaces ===

struct ID3D12Object : IUnknown
{
	virtual HRESULT GetPrivateData(const GUID& guid, uint32_t* pDataSize, void* pData) = 0;
	virtual HRESULT SetName(const char* Name) = 0;
	virtual HRESULT SetPrivateData(const GUID& guid, uint32_t DataSize, const void* pData) = 0;
	virtual HRESULT SetPrivateDataInterface(const GUID& guid, IUnknown* pData) = 0;
};

struct ID3D12DeviceChild : ID3D12Object
{
	virtual HRESULT GetDevice(const GUID& riid, void** ppvDevice) = 0;
};

struct ID3D12Pageable : ID3D11DeviceChild
{
};

struct ID3D12CommandAllocator : ID3D12Pageable
{
	virtual HRESULT Reset() = 0;
};

struct ID3D12Resource : ID3D12Pageable
{
	virtual D3D12_RESOURCE_DESC GetDesc() = 0;
	virtual D3D12_GPU_VIRTUAL_ADDRESS GetGPUVirtualAddress() = 0;
	virtual HRESULT GetHeapProperties(D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS* pHeapFlags) = 0;
	virtual HRESULT Map(uint32_t Subresource, const D3D12_RANGE* pReadRange, void** ppData) = 0;
	virtual void Unmap(uint32_t Subresource, const D3D12_RANGE* pWrittenRange) = 0;
	virtual HRESULT ReadFromSubresource(void* pDstData, uint32_t DstRowPitch, uint32_t DstDepthPitch, uint32_t SrcSubresource, const D3D12_BOX* pSrcBox) = 0;
	virtual HRESULT WriteToSubresource(uint32_t DstSubresource, const D3D12_BOX* pDstBox, const void* pSrcData, uint32_t SrcRowPitch, uint32_t SrcDepthPitch) = 0;
};

struct ID3D12CommandList : ID3D12DeviceChild
{
	virtual D3D12_COMMAND_LIST_TYPE GetType() = 0;
};

struct ID3D12CommandSignature : ID3D12Pageable
{
};

struct ID3D12DescriptorHeap : ID3D12Pageable
{
	virtual D3D12_DESCRIPTOR_HEAP_DESC GetDesc() = 0;
	virtual D3D12_CPU_DESCRIPTOR_HANDLE GetCPUDescriptorHandleForHeapStart() = 0;
	virtual D3D12_GPU_DESCRIPTOR_HANDLE GetGPUDescriptorHandleForHeapStart() = 0;
};

struct ID3D12Fence : ID3D12Pageable
{
	virtual uint64_t GetCompletedValue() = 0;
	virtual HRESULT SetEventOnCompletion(uint64_t Value, HANDLE hEvent) = 0;
	virtual HRESULT Signal(uint64_t Value) = 0;
};

struct ID3D12Heap : ID3D12Pageable
{
	virtual D3D12_HEAP_DESC GetDesc() = 0;
};

struct ID3D12PipelineState : ID3D12Pageable
{
	virtual HRESULT GetCachedBlob(ID3DBlob** ppBlob) = 0;
};

struct ID3D12QueryHeap : ID3D12Pageable
{
};

struct ID3D12RootSignature : ID3D12DeviceChild
{
};

struct ID3D12RootSignatureDeserializer : IUnknown
{
	virtual D3D12_ROOT_SIGNATURE_DESC GetRootSignatureDesc() = 0;
};

struct ID3D12CommandQueue : ID3D12Pageable
{
	virtual D3D12_COMMAND_QUEUE_DESC GetDesc() = 0;
	virtual void BeginEvent(uint32_t Metadata, const void* pData, uint32_t Size) = 0;
	virtual void EndEvent() = 0;
	virtual void CopyTileMappings(ID3D12Resource* pDstResource, const D3D12_TILED_RESOURCE_COORDINATE* pDstRegionStartCoordinate, 
                                ID3D12Resource* pSrcResource, const D3D12_TILED_RESOURCE_COORDINATE* pSrcRegionStartCoordinate, 
                                const D3D12_TILE_REGION_SIZE* pRegionSize, D3D12_TILE_MAPPING_FLAGS Flags) = 0;

	virtual void UpdateTileMappings(ID3D12Resource* pResource, uint32_t NumResourceRegions, 
	                                const D3D12_TILED_RESOURCE_COORDINATE* pResourceRegionStartCoordinates, const D3D12_TILE_REGION_SIZE* pResourceRegionSizes, 
	                                ID3D12Heap* pHeap, uint32_t NumRanges, const D3D12_TILE_RANGE_FLAGS* pRangeFlags, const uint32_t* pHeapRangeStartOffsets, 
	                                const uint32_t* pRangeTileCounts, D3D12_TILE_MAPPING_FLAGS Flags) = 0;

	virtual void ExecuteCommandLists(uint32_t NumCommandLists, ID3D12CommandList* const* ppCommandLists) = 0;
	virtual HRESULT GetClockCalibration(uint64_t* pGpuTimestamp, uint64_t* pCpuTimestamp) = 0;
	virtual HRESULT GetTimestampFrequency(uint64_t* pFrequency) = 0;
	virtual void SetMarker(uint32_t Metadata, const void* pData, uint32_t Size) = 0;
	virtual HRESULT Signal(ID3D12Fence* pFence, uint64_t Value) = 0;
	virtual HRESULT Wait(ID3D12Fence* pFence, uint64_t Value) = 0;
};

struct ID3D12GraphicsCommandList : ID3D12CommandList
{
	virtual void BeginEvent(uint32_t Metadata, const void* pData, uint32_t Size) = 0;
	virtual void EndEvent() = 0;
	virtual void BeginQuery(ID3D12QueryHeap* pQueryHeap, D3D12_QUERY_TYPE Type, uint32_t Index) = 0;
	virtual void EndQuery(ID3D12QueryHeap* pQueryHeap, D3D12_QUERY_TYPE Type, uint32_t Index) = 0;
	virtual void ClearDepthStencilView(D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, float Depth, uint8_t Stencil, uint32_t NumRects, const D3D12_RECT* pRects) = 0;
	virtual void ClearRenderTargetView(D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, const float ColorRGBA[4], uint32_t NumRects, const D3D12_RECT* pRects) = 0;
	virtual void ClearState(ID3D12PipelineState* pPipelineState) = 0;
	virtual void ClearUnorderedAccessViewFloat(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource* pResource, const float Values[4], uint32_t NumRects, const D3D12_RECT* pRects) = 0;
	virtual void ClearUnorderedAccessViewUint(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource* pResource, const uint32_t Values[4], uint32_t NumRects, const D3D12_RECT* pRects) = 0;
	virtual HRESULT Close() = 0;
	virtual void CopyBufferRegion(ID3D12Resource* pDstBuffer, uint64_t DstOffset, ID3D12Resource* pSrcBuffer, uint64_t SrcOffset, uint64_t NumBytes) = 0;
	virtual void CopyResource(ID3D12Resource* pDstResource, ID3D12Resource* pSrcResource) = 0;
	virtual void CopyTextureRegion(const D3D12_TEXTURE_COPY_LOCATION* pDst, uint32_t DstX, uint32_t DstY, uint32_t DstZ, const D3D12_TEXTURE_COPY_LOCATION* pSrc, const D3D12_BOX* pSrcBox) = 0;
	virtual void CopyTiles(ID3D12Resource* pTiledResource, const D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, const D3D12_TILE_REGION_SIZE* pTileRegionSize, ID3D12Resource* pBuffer, uint64_t BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags) = 0;
	virtual void DiscardResource(ID3D12Resource* pResource, const D3D12_DISCARD_REGION* pRegion) = 0;
	virtual void Dispatch(uint32_t ThreadGroupCountX, uint32_t ThreadGroupCountY, uint32_t ThreadGroupCountZ) = 0;
	virtual void DrawIndexedInstanced(uint32_t IndexCountPerInstance, uint32_t InstanceCount, uint32_t StartIndexLocation, INT  BaseVertexLocation, uint32_t StartInstanceLocation) = 0;
	virtual void DrawInstanced(uint32_t VertexCountPerInstance, uint32_t InstanceCount, uint32_t StartVertexLocation, uint32_t StartInstanceLocation) = 0;
	virtual void ExecuteBundle(ID3D12GraphicsCommandList* pCommandList) = 0;
	virtual void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint32_t MaxCommandCount, ID3D12Resource* pArgumentBuffer, uint64_t ArgumentBufferOffset, ID3D12Resource* pCountBuffer, uint64_t CountBufferOffset) = 0;
	virtual void IASetIndexBuffer(const D3D12_INDEX_BUFFER_VIEW* pView) = 0;
	virtual void IASetPrimitiveTopology(D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopology) = 0;
	virtual void OMSetBlendFactor(const FLOAT BlendFactor[4]) = 0;
	virtual void OMSetRenderTargets(uint32_t NumRenderTargetDescriptors, const D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, bool RTsSingleHandleToDescriptorRange, const D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor) = 0;
	virtual void OMSetStencilRef(uint32_t StencilRef) = 0;
	virtual HRESULT Reset(ID3D12CommandAllocator* pAllocator, ID3D12PipelineState* pInitialState) = 0;
	virtual void ResolveQueryData(ID3D12QueryHeap* pQueryHeap, D3D12_QUERY_TYPE Type, uint32_t StartIndex, uint32_t NumQueries, ID3D12Resource* pDestinationBuffer, uint64_t AlignedDestinationBufferOffset) = 0;
	virtual void ResolveSubresource(ID3D12Resource* pDstResource, uint32_t DstSubresource, ID3D12Resource* pSrcResource, uint32_t SrcSubresource, DXGI_FORMAT Format) = 0;
	virtual void ResourceBarrier(uint32_t NumBarriers, const D3D12_RESOURCE_BARRIER* pBarriers) = 0;
	virtual void RSSetScissorRects(uint32_t NumRects, const D3D12_RECT* pRects) = 0;
	virtual void RSSetViewports(uint32_t NumViewports, const D3D12_VIEWPORT* pViewports) = 0;
	virtual void SetComputeRoot32BitConstant(uint32_t RootParameterIndex, uint32_t SrcData, uint32_t DestOffsetIn32BitValues) = 0;
	virtual void SetComputeRoot32BitConstants(uint32_t RootParameterIndex, uint32_t Num32BitValuesToSet, const void* pSrcData, uint32_t DestOffsetIn32BitValues) = 0;
	virtual void SetComputeRootConstantBufferView(uint32_t RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation) = 0;
	virtual void SetComputeRootDescriptorTable(uint32_t RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor) = 0;
	virtual void SetComputeRootShaderResourceView(uint32_t RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation) = 0;
	virtual void SetComputeRootSignature(ID3D12RootSignature* pRootSignature) = 0;
	virtual void SetComputeRootUnorderedAccessView(uint32_t RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation) = 0;
	virtual void SetDescriptorHeaps(uint32_t NumDescriptorHeaps, ID3D12DescriptorHeap** ppDescriptorHeaps) = 0;
	virtual void SetGraphicsRoot32BitConstant(uint32_t RootParameterIndex, uint32_t SrcData, uint32_t DestOffsetIn32BitValues) = 0;
	virtual void SetGraphicsRoot32BitConstants(uint32_t RootParameterIndex, uint32_t Num32BitValuesToSet, const void* pSrcData, uint32_t DestOffsetIn32BitValues) = 0;
	virtual void SetGraphicsRootConstantBufferView(uint32_t RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation) = 0;
	virtual void SetGraphicsRootDescriptorTable(uint32_t RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor) = 0;
	virtual void SetGraphicsRootShaderResourceView(uint32_t RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation) = 0;
	virtual void SetGraphicsRootSignature(ID3D12RootSignature* pRootSignature) = 0;
	virtual void SetGraphicsRootUnorderedAccessView(uint32_t RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation) = 0;
	virtual void SetMarker(uint32_t Metadata, const void* pData, uint32_t Size) = 0;
	virtual void SetPipelineState(ID3D12PipelineState* pPipelineState) = 0;
	virtual void SetPredication(ID3D12Resource* pBuffer, uint64_t AlignedBufferOffset, D3D12_PREDICATION_OP Operation) = 0;
	virtual void SetVertexBuffers(uint32_t StartSlot, const D3D12_VERTEX_BUFFER_VIEW *pDesc, uint32_t NumBuffers) = 0;
	virtual void SOSetTargets(uint32_t StartSlot, uint32_t NumViews, const D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews) = 0;
};

struct ID3D12Device : ID3D12Object
{
	virtual HRESULT CheckFeatureSupport(D3D12_FEATURE Feature, void* pFeatureSupportData, uint32_t FeatureSupportDataSize) = 0;
	virtual void CopyDescriptors(uint32_t NumDestDescriptorRanges, const D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, const uint32_t* pDestDescriptorRangeSizes, uint32_t NumSrcDescriptorRanges, const D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, const uint32_t* pSrcDescriptorRangeSizes, D3D12_DESCRIPTOR_HEAP_TYPE  DescriptorHeapsType) = 0;
	virtual void CopyDescriptorsSimple(uint32_t NumDescriptors, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, D3D12_DESCRIPTOR_HEAP_TYPE  DescriptorHeapsType) = 0;
	virtual HRESULT CreateCommandAllocator(D3D12_COMMAND_LIST_TYPE type, const GUID& riid, void** ppCommandAllocator) = 0;
	virtual HRESULT CreateCommandList(uint32_t nodeMask, D3D12_COMMAND_LIST_TYPE type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, const GUID& riid, void** ppCommandList) = 0;
	virtual HRESULT CreateCommandQueue(const D3D12_COMMAND_QUEUE_DESC* pDesc, const GUID& riid, void** ppCommandQueue) = 0;
	virtual HRESULT CreateCommandSignature(const D3D12_COMMAND_SIGNATURE_DESC* pDesc, ID3D12RootSignature* pRootSignature, const GUID& riid, void** ppvCommandSignature) = 0;
	virtual HRESULT CreateCommittedResource(const D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, const D3D12_RESOURCE_DESC* pResourceDesc, D3D12_RESOURCE_STATES InitialResourceState, const D3D12_CLEAR_VALUE* pOptimizedClearValue, const GUID& riidResource, void** ppvResource) = 0;
	virtual HRESULT CreateComputePipelineState(const D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, const GUID& riid, void** ppPipelineState) = 0;
	virtual void CreateConstantBufferView(const D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) = 0;
	virtual void CreateDepthStencilView(ID3D12Resource* pResource, const D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) = 0;
	virtual HRESULT CreateDescriptorHeap(const D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, const GUID& riid, void** ppvHeap) = 0;
	virtual HRESULT CreateFence(uint64_t InitialValue, D3D12_FENCE_FLAGS Flags, const GUID& riid, void** ppFence) = 0;
	virtual HRESULT CreateGraphicsPipelineState(const D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, const GUID& riid, void** ppPipelineState) = 0;
	virtual HRESULT CreateHeap(const D3D12_HEAP_DESC* pDesc, const GUID& riid, void** ppvHeap) = 0;
	virtual HRESULT CreatePlacedResource(ID3D12Heap* pHeap, uint64_t HeapOffset, const D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, const D3D12_CLEAR_VALUE* pOptimizedClearValue, const GUID& riid, void** ppvResource) = 0;
	virtual HRESULT CreateQueryHeap(const D3D12_QUERY_HEAP_DESC* pDesc, const GUID& riid, void** ppvHeap) = 0;
	virtual void CreateRenderTargetView(ID3D12Resource* pResource, const D3D12_RENDER_TARGET_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) = 0;
	virtual HRESULT CreateReservedResource(const D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, const D3D12_CLEAR_VALUE* pOptimizedClearValue, const GUID& riid, void** ppvResource) = 0;
	virtual HRESULT CreateRootSignature(uint32_t nodeMask, const void* pBlobWithRootSignature, size_t blobLengthInBytes, const GUID& riid, void** ppvRootSignature) = 0;
	virtual void CreateSampler(const D3D12_SAMPLER_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) = 0;
	virtual void CreateShaderResourceView(ID3D12Resource* pResource, const D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE     DestDescriptor) = 0;
	virtual HRESULT CreateSharedHandle(ID3D12DeviceChild* pObject, const SECURITY_ATTRIBUTES* pAttributes, DWORD Access, const char* Name, HANDLE* pHandle) = 0;
	virtual void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, const D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) = 0;
	virtual HRESULT Evict(uint32_t NumObjects, ID3D12Pageable* const* ppObjects) = 0;
	virtual LUID GetAdapterLuid() = 0;
	virtual void GetCopyableFootprints(const D3D12_RESOURCE_DESC* pResourceDesc, uint32_t FirstSubresource, uint32_t NumSubresources, uint64_t BaseOffset, D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, uint32_t* pNumRows, uint64_t* pRowSizeInBytes, uint64_t* pTotalBytes) = 0;
	virtual D3D12_HEAP_PROPERTIES GetCustomHeapProperties(uint32_t nodeMask, D3D12_HEAP_TYPE heapType) = 0;
	virtual uint32_t GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType) = 0;
	virtual HRESULT GetDeviceRemovedReason() = 0;
	virtual uint32_t GetNodeCount() = 0;
	virtual D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo(uint32_t visibleMask, uint32_t numResourceDescs, const D3D12_RESOURCE_DESC* pResourceDescs) = 0;
	virtual void GetResourceTiling(ID3D12Resource* pTiledResource, uint32_t* pNumTilesForEntireResource, D3D12_PACKED_MIP_INFO* pPackedMipDesc, D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, uint32_t* pNumSubresourceTilings, uint32_t FirstSubresourceTilingToGet, D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips) = 0;
	virtual HRESULT MakeResident(uint32_t NumObjects, ID3D12Pageable* const* ppObjects) = 0;
	virtual HRESULT OpenSharedHandle(HANDLE NTHandle, const GUID& riid, void** ppvObj) = 0;
	virtual HRESULT OpenSharedHandleByName(const char* Name, DWORD Access, HANDLE* pNTHandle) = 0;
	virtual HRESULT SetStablePowerState(bool Enable) = 0;
};


// === D3D12 Core Functions ===

HRESULT D3D12CreateDevice(IUnknown* pAdapter, D3D_FEATURE_LEVEL MinimumFeatureLevel, const GUID& riid, void** ppDevice);
HRESULT D3D12CreateRootSignatureDeserializer(const void* pSrcData, size_t SrcDataSizeInBytes, const GUID& pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
HRESULT D3D12GetDebugInterface(const GUID& riid, void** ppvDebug);
HRESULT D3D12SerializeRootSignature(const D3D12_ROOT_SIGNATURE_DESC* pRootSignature, D3D_ROOT_SIGNATURE_VERSION Version, ID3DBlob** ppBlob, ID3DBlob** ppErrorBlob);

